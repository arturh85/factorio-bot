name: "publish"
on:
  push:
    tags:
      - 'v**'

jobs:
  build-publish:
    needs: create-github-release
    name: Build & Publish
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      # Prepare
      - name: 🔥 checkout code
        uses: actions/checkout@v3
      - name: 🛠️ install nodejs 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: 🛠️ install rust stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: 🛠️ install cargo tauri-cli
        run: |
          cargo install tauri-cli
      - name: 🛠️ install webkit2gtk for tauri build
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.0 libgtksourceview-3.0-dev
      - name: 🛠️ install cargo mdbook with mermaid support
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cargo install mdbook mdbook-mermaid

      # Javascript
      - name: 🛠️ install nodejs dependencies
        run: |
          cd app; yarn
      - name: 🦠 update version in package.json & tauri.conf.json
        run: |
          cd app/scripts; node update-package-version.js
      - name: 🧪 lint javascript code
        run: |
          cd app; yarn lint
      - name: 🧪 test javascript code
        run: |
          cd app; yarn test:coverage
      - name: 🏗️ build javascript code
        run: |
          cd app; yarn build:web

      # Rust
      - name: 🏗️ build rust code
        run: |
          cargo build --timings
          cd app && yarn tauri:build
      - name: 🧪 test rust code
        run: |
          cd app; yarn cargo:test

      # Publish tauri artifacts
      - name: 📤️ upload tauri artifacts to github release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-github-release.outputs.id }}
          iconPath: "../public/logo.png"
          configPath: "tauri.conf.json"
          projectPath: "./app"
          tauriScript: "npm run dummy"

      # Prepare gh-pages
      - name: 🏗️ build rust docs
        if: matrix.platform == 'ubuntu-latest'
        run: |
          mkdir public 
          cargo doc --all --no-deps
          mv target/doc public/doc
      - name: 🏗️ build auto-updater json files
        if: matrix.platform == 'ubuntu-latest'
        run: |
          mkdir public/updates/
          cd app/scripts; node build-auto-updater-json.js "${{ needs.create-github-release.outputs.release_body }}"
      - name: 🏗️ build mdbook "user guide"
        if: matrix.platform == 'ubuntu-latest'
        run: |
          mdbook build docs/userguide
          mv docs/userguide/book public/userguide
      - name: 🏗️ build mdbook "developer guide"
        if: matrix.platform == 'ubuntu-latest'
        run: |
          mdbook build docs/devguide
          mv docs/devguide/book public/devguide
      - name: 🏗️ build lua api docs
        if: matrix.platform == 'ubuntu-latest'
        uses: ./.github/actions/ldoc/
        with:
          config-path: docs/lua/config.ld
          source-path: docs/lua/src/
          output-path: public/lua/
      - name: 🚚 move generated docs and stats to public/ folder
        if: matrix.platform == 'ubuntu-latest'
        run: |
          mv app/dist/stats.html public/stats.html
          mv target/cargo-timings/ public/cargo-timings/

      # Publish gh-pages
      - name: 📤 deploy public/ to gh-pages
        if: matrix.platform == 'ubuntu-latest'
        uses: peaceiris/actions-gh-pages@1304921c60d95a91f76f5fea0ce500280f4a6702
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./public
          force_orphan: true

  create-github-release:
    name: Create Github Release
    runs-on: ubuntu-18.04
    outputs:
      id: ${{ steps.create_release.outputs.id }}
      release_body: ${{ steps.release.outputs.release_body }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: 🛠️ install nodejs 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: 🦠 update version in package.json & tauri.conf.json
        run: |
          cd app/scripts; node update-package-version.js
      - name: 🔖 create github draft release
        uses: ncipollo/release-action@v1
        id: create_draft_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allowUpdates: true
          replacesArtifacts: false
          name: "Factorio Bot v${{ env.PACKAGE_VERSION }}"
          tag: v${{ env.PACKAGE_VERSION }}
          body: "body filled later"
          draft: true
          prerelease: true
      - name: generate changelog
        uses: orhun/git-cliff-action@v1
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
      - name: set the release body to changelog
        id: release
        shell: bash
        run: |
          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
          r="$(printf "$r" | tail -n +3)"
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "::set-output name=release_body::$r"


      - name: 🔖 create github release
        uses: ncipollo/release-action@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allowUpdates: true
          replacesArtifacts: false
          name: "Factorio Bot v${{ env.PACKAGE_VERSION }}"
          tag: v${{ env.PACKAGE_VERSION }}
          body: "${{ steps.release.outputs.release_body }}"
          draft: false
          prerelease: true